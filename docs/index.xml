<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Telco Network Cloud Orchestration Learning Center</title><link>/</link><description>Recent content in Home on Telco Network Cloud Orchestration Learning Center</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>/user-guides/resource-engineering/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/resource-engineering/overview/</guid><description>A Resource is an abstract term for a leaf level component of an Assembly Service. Resource instances ultimately represent infrastructure and the software running at a location to fulfil a function.
Agile Lifecycle Manager (ALM) requires a descriptor to identify the properties, transitions, operations, metrics, and the infrastructure available for each resource instance. The Resource can then be added to any number of Assembly designs and instantiated upon creation of an Assembly.</description></item><item><title>Accessing Vault</title><link>/user-guides/administration/configuration/accessing-vault/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/administration/configuration/accessing-vault/</guid><description>The open source HashiCorp Vault is used to securely store configuration data for Agile Lifecycle Manager (ALM). It is exposed on an ingress port as host vault.lm
Vault has a GUI which can be used to alter the data held. This GUI is protected by a Vault Token with the token allocated to vault during the installation at which time the time-to-live for the token is also set. On expiry, this key will need to be changed or reset to its current value to maintain access to vault for both users and the set of ALM microservices.</description></item><item><title>Create a Brent Resource Package</title><link>/user-guides/resource-engineering/resource-packages/brent/create-brent-resource-package/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/resource-engineering/resource-packages/brent/create-brent-resource-package/</guid><description>Introduction and Structure A Brent resource package is a zip file conforming to a specific layout. For example, if the resource uses the Openstack driver and Ansible driver, the resource package directory will be as follows:
Definitions/
lm/
resource.yaml # mandatory
Lifecycle/
ansible/
config/
host_vars/
myhost.yaml
inventory
scripts/
Install.yaml
Start.yaml
openstack/
heat.yaml
The Definitions directory contains the LM descriptor file. The Lifecycle directory should be populated with scripts and templates required by the chosen driver(s).</description></item><item><title>Default Client Credentials</title><link>/reference/security/default-client-credentials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/security/default-client-credentials/</guid><description>During the default installation of Agile Lifecycle Manager (ALM) your system is deployed with a set of credentials configured for three standard clients. Unless changed (recommended), these will be as follows;
Default Clients Client ID Secret Details LmClient pass123 Default admin client. The id and secret can be configured at installation NimrodClient pass123 Client used by the LM user interface. The secret can be configured at installation DokiClient pass123 Client used by the LM behaviour center.</description></item><item><title>Getting Started</title><link>/installation/cicdhub/cicd-hub-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/cicdhub/cicd-hub-start/</guid><description>This section details how to install the CI/CD Hub using Helm on an existing Kubernetes cluster. This will install the following services:
Gogs: Lightweight self-hosted Git service Nexus: Artifact repository manager Jenkins: Automation server to enable continuous integration and continuous delivery Openldap: Open-source implementation of the Lightweight Directory Access Protocol, for user management of Agile Lifecycle Manager (ALM) environments Docker Registry: Registry for hosting docker images Nginx Ingress: Ingress controller to support accessing some services with Ingress Pre-requisites Kubernetes A Kubernetes cluster is required to install the Hub.</description></item><item><title>Getting Started</title><link>/installation/lm/production/production-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/lm/production/production-start/</guid><description>This section details how to install Agile Lifecycle Manager (ALM) using Helm on an existing Kubernetes cluster. This will install the following Helm charts:
helm-foundation - reference Helm Chart for deploying the third-party components required by ALM. lm-configurator - Helm Chart executing a Kubernetes job to create relevant schemas and other configuration required by ALM. lm-helm - Helm Chart for deploying the ALM Microservices Pre-requisites Kubernetes A Kubernetes cluster is required to install ALM.</description></item><item><title>Getting Started</title><link>/installation/resource-manager/ansible-rm/ansible-rm-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/resource-manager/ansible-rm/ansible-rm-start/</guid><description>This section details a recommended installation of the IBM OSSLM Ansible Resource Manager.
Pre-requisites Kubernetes A Kubernetes cluster is required to install the Ansible RM. This environment must be configured with:
a Storage Class to provision persistent volumes in your cluster a Namespace to install into (you may use the default) In addition, you will need the following client tools, pre-configured with access to your Kubernetes environment:
Helm kubectl Agile Lifecycle Manager (ALM) We recommend installing a ALM environment first so the Ansible RM may share the existing Kafka cluster.</description></item><item><title>How to Design a Network Service</title><link>/user-guides/network-service-design/how-to-design-a-network-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/network-service-design/how-to-design-a-network-service/</guid><description>There are a number of tasks involved in designing a Network Service (NS). In order to understand what a network service is, we first need to look at what it consists of.
What is a Network Service? A Network Service, is a collection of VNF and/or PNF that will be used by Agile Lifecycle Manager (ALM) to instantiate either a complete end-to-end service for a customer or, a significant portion of a customer’s service.</description></item><item><title>Install and Set Up Lifecycle Manager</title><link>/installation/lm/alm-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/lm/alm-start/</guid><description>Choosing your Deployment The first step in installing the Agile Lifecycle Manager (ALM) is to determine whether you are installing a Development or Production deployment.
All in one Deployment Refer to this guide for an all in one deployment
OpenShift Deployment Refer to this guide for a development OpenShift deployment
Staging and Production Deployment Refer to this guide for a staging or production deployment</description></item><item><title>Introduction</title><link>/user-guides/cicd/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/cicd/introduction/</guid><description>Pre-requisites The following links introduce terms used through out this section:
Key ALM concepts introduce the Agile Lifecycle Manager (ALM) programming model used to model VNFs and Network Services.
Assembly and resource specifications give detailed descriptions of how to model lifecycles in ALM.
Introduction Cloud DevOps best practices and principles are at the heart of the ALM solution. To scale any Cloud based networking program, a unified operations and engineering model is combined with a set of automation tools that can simplify and automate the complexities of an end-to-end VNF or Network Service lifecycle.</description></item><item><title>Languages Overview</title><link>/user-guides/administration/configuration/languages/language-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/administration/configuration/languages/language-overview/</guid><description>The Agile Lifecycle Manager (ALM) User Interface supports multiple languages via translation.json files. A translation file can be provided for each locale the user requires which contains mappings for all text within the ALM UI (see sample translation file below for reference).
&amp;lt;li&amp;gt;
&amp;lt;a href=&amp;quot;/user-guides/administration/configuration/languages/language-overview.files/translation.json&amp;quot; &amp;gt;
translation.json
&amp;lt;/a&amp;gt;
(29 kB)
&amp;lt;/li&amp;gt;
Adding Locales to ALM To set the translations for each locale of the ALM UI you need to produce a locales.</description></item><item><title>OpenShift Origin</title><link>/installation/lm/openshift/openshift/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/lm/openshift/openshift/</guid><description>This section details how to set up a local OpenShift Origin (community distribution of OpenShift) all-in-one cluster and configure that cluster for installing Agile Lifecycle Manager (ALM).
Pre-requisites Previous knowledge of basic installation process with LM Helm charts. Linux machine (or Linux VM running on another platform) to install OpenShift cluster. OpenShift all-in-one set-up This guide follows OpenShift Origin (version 3.11) documentation.
Docker Install Docker (version 1.13 or later) onto your Linux machine.</description></item><item><title>Overview</title><link>/user-guides/behaviour-testing/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/behaviour-testing/overview/</guid><description>Behaviour Testing Behaviour testing allows you to simulate scenarios that will test the lifecycle of your VNFs/Network Services. It allows you to automate creating instances of your services in test environments, simulating traffic or lifecycle processes, whilst monitoring and asserting metric values are as expected.
Each scenario can be executed independently to confirm a particular aspect or feature of your service is working. The full collection of the scenarios related to a service can also be executed as a test suite, useful in a CI/CD process to re-test the service after a change has been made.</description></item><item><title>Overview</title><link>/user-guides/resource-engineering/resource-packages/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/resource-engineering/resource-packages/overview/</guid><description>Structure The structure of a resource package is determined by the resource manager that uses it. For Brent, see Brent Resource Packages.
Next Steps Once you understand the basics of a Resource package, you may move on to understand Drivers and how they are used by Brent to manage the Resource.</description></item><item><title>Resource Manager Overview</title><link>/installation/resource-manager/rm-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/resource-manager/rm-overview/</guid><description>Introduction The Agile Lifecycle Manager (ALM) provides open integration of external virtual and physical resources to be assembled with others into complete services. While orchestrating Assemblies, LM leverages a set of one or more external Resource Managers (RM) through their northbound APIs to orchestrate the lifecycles of the managed resource instances deployed to Virtual Infrastructure Managers (VIMs). The Resource Managers are responsible for communicating with VIMs to request actions on cloud infrastructure compute, storage and network resources in support of deployed resource instances lifecycles.</description></item><item><title>Themes Overview</title><link>/user-guides/administration/configuration/themes/theme-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/administration/configuration/themes/theme-overview/</guid><description>Changing the look of the Agile Lifecycle Manager (ALM) User Interface UI is supported via Theme Packages. A theme can be provided for each unique look that is needed for the ALM UI.
Changing the Theme of the ALM UI To change the theme of the UI you need to produce a theme.tar containing the necessary elements. The TAR should include a directory for each potential theme. Each theme is represented by a directory which should include the favicon, stylesheet and images to be used: +-- mytheme (change to your Theme name)
| +-- favicon.</description></item><item><title>What is ALM?</title><link>/what-is-stratoss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/what-is-stratoss/</guid><description>Agile Lifecycle Manager (ALM) is a cloud networking automation platform that embraces the IT DevOps movement and fully automates the operational lifecycle of cloud network services.
ALM enables complex network services to be designed, created and continuously optimized across hybrid and distributed cloud environments. Our revolutionary intent-based automation engine along with the in-built automated test and DevOps tools deliver a 30 times reduction in operational effort. As an &amp;lsquo;automation&amp;rsquo; product, it distinguishes itself by fully automating the day 1 and 2 ongoing maintenance and change management scenarios, rather than just orchestrating the day 0 &amp;lsquo;turn it on&amp;rsquo; scenario.</description></item><item><title>Assembly Descriptor</title><link>/reference/descriptor-specification/assembly-descriptor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/descriptor-specification/assembly-descriptor/</guid><description>Introduction This document describes the assembly descriptors that are used by the Agile Lifecycle Manager (ALM). ALM needs to have descriptions of the building blocks of applications that it is going to manage. The basic building blocks are described in resource descriptors (resource descriptors are described in separate document). Sets of these are composed into assembly descriptors to allow designers to describe a complete application/service that they need LM to manage.</description></item><item><title>Assembly Events</title><link>/reference/behaviour-testing/step-reference/assembly-events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/behaviour-testing/step-reference/assembly-events/</guid><description>Check for successful process Description Monitors Kafka for a message describing the success of a given process for a given Assembly. For example, this step could be used to check a scale occurred on an Assembly when simulating traffic that triggers a scale policy.
The step begins monitoring Kafka as the step is executed, so any processes completed before then will not be seen.
Passes when:
a message is seen which describes the success of the given process for the given Assembly Fails when:</description></item><item><title>Getting Started</title><link>/user-guides/administration/security/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/administration/security/getting-started/</guid><description>The default installation of Agile Lifecycle Manager (ALM) includes a secure application with protected access and a set of preconfigured roles. It also includes predefined users who are able to perform a variety of the key system roles. These predefined users are suitable for either basic usage of the system in a demonstration capacity, or can act as a template for understanding how to configure users in a more permanent installation.</description></item><item><title>Installation</title><link>/installation/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/installation/</guid><description>Pre-requisites Read What is Agile Lifecycle Manager (ALM) and watch ALM in action Understand the Key Concepts of ALM If installing the CI/CD Hub then be familiar with the concepts of a CI/CD in the context of ALM Choose your install path Read the Deployment Model and determine which of the following install paths apply to you:
Install CI/CD Hub
Install ALM
Install Resource Manager</description></item><item><title>Offline</title><link>/installation/cicdhub/offline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/cicdhub/offline/</guid><description>The following guide explains how to pre-prepare the artifacts required by the CI/CD Hub during installation so you may complete installation at a later date without internet access.
Preparing Offline Install Helm Charts Pre-download the CI/CD Hub Helm chart from the releases page on GitHub.
Docker Images Create a workspace mkdir cicdhub-docker-images
Identify requires images Below is a full list of the docker images used by the sub-charts in v2.0.5 of the CI/CD Hub helm chart:</description></item><item><title>Assembly Configurations</title><link>/user-guides/behaviour-testing/assembly-configurations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/behaviour-testing/assembly-configurations/</guid><description>Assembly configurations are pre-configured instances of a VNF/Network Service you will make use of in your scenarios. They hold a reference to an assembly descriptor you wish to create and the values to set on the properties of that descriptor. Essentially they are re-usable plans for creating an instance of an assembly at a later time.
In your scenarios you will select the assembly configurations to be used. As the scenario begins, the instances will be created based on the planned configuration, then as the scenario completes they may be optionally uninstalled to keep the environment clean for the next execution.</description></item><item><title>Business Case</title><link>/business-case/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/business-case/</guid><description>The Agile Lifecycle Manager (ALM) Business case ALM helps service providers effectively streamline service delivery, minimize complexity, and deliver innovative new services to customers at significant speed and lower cost of operations.
The problem our product solves and our value proposition are explained as follows:
Service providers are undergoing a platform and business transformation at the same time. One in support of the other.
For business, Service providers must find new sources of revenue growth and strive for higher profit margins.</description></item><item><title>Default LM Users</title><link>/reference/security/default-security-users/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/security/default-security-users/</guid><description>The default installation of Agile Lifecycle Manager (ALM) comes with the following default users, groups, roles and privileges.
Default users Username Password Member of Group Suspended Jack jack SLMAdmin No Jill jill Portal No John john SLMAdmin No Jane jane SLMAdmin, RootSecAdmin No Derek derek RootSecAdmin No Lisa lisa - No Kim kim ReadOnly No Steve steve SLMAdmin Yes Default groups Group Name Roles Granted SLMAdmin SLMAdmin Portal Portal RootSecAdmin RootSecAdmin ReadOnly ReadOnly Default roles SLM Role Description Privileges SLM Admin A user with the &amp;lsquo;SLMAdmin&amp;rsquo; role can perform the whole range of operations permissible with ALM Network Service instances - CRUDEVNF Instances - CRUDENetwork Service Designs - CRUDEVNF Designs - CRUDEDeployment Locations - CRUDEVDUs - CRUDEBehaviour Tests - CRUDIntent Requests - Read and ExecuteResource Driver - Read and Write Portal As a user with &amp;lsquo;Portal&amp;rsquo; role can create Assembly Instances, but otherwise has read-only access Network Service instances - CRUDEVNF Instances - Read-OnlyNetwork Service Designs - Read-OnlyVNF Designs - NO ACCESSDeployment Locations - Read-OnlyVDUs - Read-OnlyBehaviour Tests - CRUDEIntent Requests - Read and ExecuteResource Driver - Read and Write ReadOnly As a user with &amp;lsquo;ReadOnly&amp;rsquo; role has read-only access to all parts of the system Network Service instances - Read-OnlyVNF Instances - Read-OnlyNetwork Service Designs - Read-OnlyVNF Designs - Read-OnlyDeployment Locations - Read-OnlyVDUs - Read-OnlyBehaviour Tests - Read-OnlyResource Driver - Read-Only RootSecAdmin &amp;lsquo;Root Security Admin&amp;rsquo;.</description></item><item><title>Design a Network Service</title><link>/user-guides/network-service-design/develop-a-network-service-package/design-a-network-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/network-service-design/develop-a-network-service-package/design-a-network-service/</guid><description>This section describes the steps to design and model a Network Service. A Network Service is typically designed prior to the implementation. This is part of a customer project in which requirements are gathered, a design is made including the Network Service Design, and then implemented.
Objectives Learn how to model a Network Service Create a Network Service graphical model that can be used during implementation Pre-requisites An understanding of the customer requirements for the Network Service in terms of composition, location, relationships, networking, testing, and underlying infrastructure requirements.</description></item><item><title>Getting Started</title><link>/user-guides/cicd/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/cicd/getting-started/</guid><description>Objective This section describes how to setup your own Agile Lifecycle Manager (ALM) CI/CD process and tools using the CI/CD Hub.
Pre-requisites You must have installed the CI/CD Hub software and attach one or more ALMs. A detailed description of the CI/CD Hub software can be found here.
ALM CI/CD Process and Tasks Once the CI/CD Hub is up and running, perform the following tasks to configure it to the needs of your team.</description></item><item><title>How-to Guides</title><link>/best-practices/how-to-guides/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/best-practices/how-to-guides/</guid><description>This section discusses common Agile Lifecycle Manager (ALM) use cases and provides examples to help illustrate how to best apply to what you are working on.
VNFs Upgrade a VNF with no service downtime Move a VNF from one location to another Network Services Model an EPC Network Service Create service chains and auto test their behaviour Model an Enterprise Connectivity Network Service Data Center Automation Configure and tune hardware devices Configure network fabric controllers Auto-test your NFVI data center Configure physical network appliances Northbound Integration Integrate with external policy engines Southbound Integration Build your own Resource Manager Integrate with ETSI SOL003 VNFMs DevOps Manage CI/CD inter package dependencies Self certify VNFs Manage lifecycle of VNF packages that are managed by external VNFMs Cloud native Create a cloud native &amp;ldquo;Network Service Mesh&amp;rdquo;</description></item><item><title>Intent Engine</title><link>/reference/behaviour-testing/step-reference/intent-engine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/behaviour-testing/step-reference/intent-engine/</guid><description>Create Assembly Description Requests the creation of an Assembly with the given descriptor and initial state. The step then waits for the process to complete successfully.
Passes when:
the create was accepted and completed successfully Fails when:
the create was rejected (not a valid request) the create was accepted but failed to complete successfully the create was accepted but has not finished before a configurable amount of time has passed (configured with alm.</description></item><item><title>Language Installation</title><link>/user-guides/administration/configuration/languages/language-installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/administration/configuration/languages/language-installation/</guid><description>The following steps explain how to alter the installation process to change the language files used by the Agile Lifecycle Manager (ALM) User Interface.
Installing a Locale Follow the steps in language overview before doing the following.
When installing the lm-configurator helm chart you must include the following values:
configurator:
lmConfigImport:
nimrod:
alm.nimrod.localeLocation: /var/lm/locales
When installing the lm-helm helm chart you must include the following values so the ConfigMap with locales.</description></item><item><title>Manage Roles</title><link>/user-guides/administration/security/manage-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/administration/security/manage-roles/</guid><description>Pre-requisites To complete this guide you will need:
An existing installation of the Agile Lifecycle Manager (ALM) An understanding of how to configure LM using the Vault UI kubectl client with access to the Kubernetes cluster LM is installed on Find Role Configuration Login to the Vault UI for your LM system and navigate to the secrets engine named lm
Navigate to the secret named ishtar</description></item><item><title>Offline</title><link>/installation/lm/production/offline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/lm/production/offline/</guid><description>The following guide explains how to pre-prepare the artifacts required by Agile Lifecycle Manager (ALM) during installation so you may complete installation at a later date without internet access.
Preparing Offline Install Helm Charts The Helm charts should have already been gathered and copied onto the installation machine.
Docker Images Create a workspace mkdir lm-docker-images
Identifying Images Below is a full list of the docker images used by the sub-charts in v2.</description></item><item><title>Resource Descriptor</title><link>/reference/descriptor-specification/resource-descriptor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/descriptor-specification/resource-descriptor/</guid><description>Introduction This document describes the descriptors that are used by the Agile Lifecycle Manager (ALM). ALM needs to have descriptions of the building blocks of applications that it is going to manage. The basic building blocks are described in resource descriptors. Sets of these are composed into assembly descriptors to allow designers to describe a complete application/service that they need LM to manage.
Naming Each resource must have a name and a version - it is advisable to name the resource assuming other people might use the same name i.</description></item><item><title>Theme Installation</title><link>/user-guides/administration/configuration/themes/theme-installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/administration/configuration/themes/theme-installation/</guid><description>The following steps explain how to alter the installation process to change the theme used by the Agile Lifecycle Manager (ALM) User Interface.
Installing a Theme Follow the steps in theme overview before doing the following.
When installing the lm-configurator helm chart you must include the following values, changing the value of theme.name to be the name of theme to be used:
configurator:
lmConfigImport:
nimrod:
alm.</description></item><item><title>Sizing</title><link>/installation/cicdhub/sizing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/cicdhub/sizing/</guid><description>CPU and Memory The CPU and memory limits of each service may be configured by adding resource requests and limit values to the custom values file. See Kubernetes - Manage Compute Resources Container for more information.
The default values for each service are shown below. Override any defaults by adding them to your custom values. Blank fields represent deployments without a default value, which will result in no limits being imposed on their usage.</description></item><item><title>Access Configuration</title><link>/installation/lm/production/configuration/access-config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/lm/production/configuration/access-config/</guid><description>Configuring Access to Agile Lifecycle Manager (ALM) The installation of ALM includes an Ingress Controller which exposes the key services externally. This needs to be configured so that access to these services will be on the required hostnames and ports.
If your environment already has an Ingress Controller available, then disable the one that comes with the LM installation. You can check the status of your ingress controller with:
kubectl get service --all-namespaces | grep ingress</description></item><item><title>Configure the Hub</title><link>/user-guides/cicd/configure-cicd-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/cicd/configure-cicd-hub/</guid><description>Objectives A newly installed CI/CD Hub will require some additional configuration to setup users and cross component integrations.
Pre-requisites Newly installed CI/CD Hub See initial CI/CD Hub login details Add users to OpenLDAP To add users to the to the OpenLDAP installed with the CI/CD Hub. You can follow the instructions to add users to a standalone Agile Lifecycle Manager (ALM).
Slave ALMs can be configured at installation time to use the OpenLDAP instance deployed with the CI/CD Hub.</description></item><item><title>Intent Requests</title><link>/reference/behaviour-testing/step-reference/intent-requests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/behaviour-testing/step-reference/intent-requests/</guid><description>The steps in this group can be used to request processes to be executed on Assemblies. The difference between these steps and those in the Intent Engine group is the asynchronous execution. These steps only request the process to start, they do not wait for it to complete. The successful completion of the process can be checked for later in the scenario with the provided &amp;ldquo;Expect Intent Success&amp;rdquo; step.
Create Assembly Description Requests the creation of an Assembly with the given descriptor and initial state, progressing when the request is accepted.</description></item><item><title>Key Concepts</title><link>/key-concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/key-concepts/</guid><description>Objectives This section introduces key concepts that are useful to understand how Agile Lifecycle Manager (ALM) works and the key drivers behind of the design.
Prerequisites It is assumed that the reader has basic understanding of concepts around virtualization, NFV, and DevOps.
To learn about NFV basic concepts read: NFV Basics guide (Coming Soon)
Unified Lifecycle Model Standard lifecycle model is a key enabling factor for intent based automation. In order to drive automation, ALM adopted a standardized lifecycle model which mandates all the underlying artifacts (Network Services and VNFs) look the same to ALM.</description></item><item><title>Language Updates</title><link>/user-guides/administration/configuration/languages/language-running/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/administration/configuration/languages/language-running/</guid><description>The following steps explain how to change the language files used by the Agile Lifecycle Manager (ALM) User Interface when it is running.
Updating a Locale Follow the steps in translation overview before doing the following.
Add the following configuration to vault for lm/nimrod, changing the value of alm.nimrod.localeLocation to be the name of the theme to be used:
&amp;quot;alm.nimrod.localeLocation&amp;quot;: &amp;quot;/var/lm/locales&amp;quot;
Create a values file with the following configuration: nimrod:
app:
config:
localesConfigMap: lm-locales
Run a helm upgrade of the ALM helm chart with the custom values file above.</description></item><item><title>Manage RM Timeout values</title><link>/user-guides/administration/configuration/manage-rm-timeout-values/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/administration/configuration/manage-rm-timeout-values/</guid><description>Introduction Agile Lifecycle Manager (ALM) can communicate with a number of Resource Managers (RM) when executing the set of tasks of an intent. This communication is through the OSSLM API. There are three timers and three associated timer configurations values which govern this relationship.
alm.http.clientReadTimeout alm.daytona.resource-manager.default-timeout-duration alm.daytona.resource-manager.polling-interval Setting Default Setting Description alm.http.clientReadTimeout 30s Defaulting to 30 seconds, clientReadTimeout represents the time that the Intent Engine will wait for a response to the task execution request from the RM alm.</description></item><item><title>Manage Users and Groups</title><link>/user-guides/administration/security/manage-users/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/administration/security/manage-users/</guid><description>The following guide details how to configure users in the default OpenLDAP installed as part of Agile Lifecycle Manager (ALM).
ALM provides no built-in mechanism for managing users. There are many available LDAP clients which can be used for such purposes which makes the management much easier and a lot more visual.
If your environment is connecting to an LDAP managed outside of ALM, then the system administrator is expected to already understand the connection and user model in use.</description></item><item><title>Metric Definitions</title><link>/reference/behaviour-testing/step-reference/metric-definitions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/behaviour-testing/step-reference/metric-definitions/</guid><description>Specify Metric Definition Description Specify the format of messages on Kafka for a metric type that will be recorded later.
Passes when:
the format is valid Fails when:
the format is invalid Properties Property Description metricDefinitionName Name given to the metric definition (referenced in steps to record a metric) metricDefinition A table specifying the 4 fields to be found on a Kafka message Metric Definition Table:</description></item><item><title>Overview</title><link>/user-guides/resource-engineering/drivers/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/resource-engineering/drivers/overview/</guid><description>Resource Driver Overview Brent handles Resource Manager transition and operation requests for Resources using Resource Drivers.
The following diagram shows the interactions between Brent and a resource driver Resource Driver is a combination of VIM and Lifecycle drivers of LM version 2.1 into a single driver concept.
Unlike in v2.1.0 where a VIM Driver handles infrastructure creation/deletion while Lifecycle Driver executes resource transitions once the resource has been created; a Resource Manager handles both infrastructure and lifecycles by serving Create/Delete as lifecycle requests.</description></item><item><title>Prerequisites</title><link>/user-guides/resource-engineering/resource-packages/brent/basic-resource/get-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/resource-engineering/resource-packages/brent/basic-resource/get-started/</guid><description>Objectives This guide aims to show you how to:
Create a working Resource with Openstack infrastructure Include an external IP address as part of the infrastructure so the Resource service can be accessed publicly Add lifecycle scripts to configure a software function for the Resource Create an instance of the Resource Prerequisites To follow this guide you will need:
LMCTL v2.5.0+ A ready-to-use Agile Lifecycle Manager (ALM) environment An Openstack environment (for testing we recommend installing DevStack.</description></item><item><title>Prerequisites</title><link>/user-guides/resource-engineering/resource-packages/brent/infrastructure-keys-resource/get-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/resource-engineering/resource-packages/brent/infrastructure-keys-resource/get-started/</guid><description>Objectives This guide aims to show you how to:
Create a working Resource with Openstack infrastructure Include an external IP address as part of the infrastructure so the Resource service can be accessed publicly Create Compute instances accessible with SSH keys that are stored securely in LM (Brent), and provided to lifecycle scripts and inventory to be able to connect to the instance. Add lifecycle scripts to configure a software function for the Resource Create an instance of the Resource Prerequisites To follow this guide you will need:</description></item><item><title>Relationship State</title><link>/reference/descriptor-specification/relationship-state/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/descriptor-specification/relationship-state/</guid><description>Relationship State When defining a relationship we must also define when this relationship should be created and deleted (ceased) within the context of the assembly lifecycle (and the lifecycles of its components)
This is achieved by specifying the minimum state each end of the relationship must occupy for the relationship to exist The target component is the driving end of the relationship, meaning that the relationship will be created when the target component will reach its minimum state in this transition In addition to specifying the minimum state, we can also define a modifier for the state which identifies whether the relationship should be created before (pre) or after (post) the relevant end transitions</description></item><item><title>Scenarios</title><link>/user-guides/behaviour-testing/scenarios/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/behaviour-testing/scenarios/</guid><description>A scenario outlines the list of steps to execute in order to simulate actions or assert expectations of lifecycle behaviour or metric values. It can be thought of as a script, that will execute commands one-by-one till completion. Each step represents a command which must pass in order for the scenario to continue execution. If a step fails, the scenario is stopped and marked as failed. Any steps scheduled after the failing step are not executed.</description></item><item><title>Setting up a project</title><link>/user-guides/network-service-design/develop-a-network-service-package/setting-up-a-project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/network-service-design/develop-a-network-service-package/setting-up-a-project/</guid><description>The first step in developing a Network Service (NS) is to create a NS project.
Create NS Project On your local environment, you create a NS project by running the following LMCTL command in the folder you want the NS to be created in:
lmctl project create --name myvns --version 0.1 --servicetype NS ./myns
This creates a NS directory structure for the NS. The result of this is a NS directory structure that is created that should look like this:</description></item><item><title>Storage</title><link>/installation/cicdhub/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/cicdhub/storage/</guid><description>Storage Class By default, any service requiring persistence is configured to use the default provisioner of your Kubernetes cluster. You can check your default with kubectl:
kubectl get storageclass
The default storage class will be shown with (default) alongside it&amp;rsquo;s name. If you have no default, you can mark an existing class as the default with:
kubectl patch storageclass &amp;lt;your-class-name&amp;gt; -p '{&amp;quot;metadata&amp;quot;: {&amp;quot;annotations&amp;quot;:{&amp;quot;storageclass.kubernetes.io/is-default-class&amp;quot;:&amp;quot;true&amp;quot;}}}'
Alternatively, you may explicitly set the storage class for each service by adding storageClass fields in your custom values:</description></item><item><title>Theme Updates</title><link>/user-guides/administration/configuration/themes/theme-running/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/administration/configuration/themes/theme-running/</guid><description>The following steps explain how to change the theme used by the Agile Lifecycle Manager (ALM) User Interface when it is running.
Updating a Theme Follow the steps in theme overview before doing the following.
Add the following configuration to vault for lm/nimrod, changing the value of theme.name to be the name of the theme to be used:
&amp;quot;alm.nimrod.theme.name&amp;quot;: &amp;quot;mytheme&amp;quot;
Create a values file with the following configuration: nimrod:
app:
config:
themesConfigMap: lm-themes
Run a helm upgrade of the ALM helm chart with the custom values file above.</description></item><item><title>Storage</title><link>/installation/resource-manager/ansible-rm/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/resource-manager/ansible-rm/storage/</guid><description>Existing Storage Services Ansible RM requires a connection to Cassandra and Kafka. By default the Helm chart is configured to locate existing persisted services using labels:
Cassandra - expects a Cassandra service in the same namespace with labels app=cassandra and release=foundation Kafka - expects a Kafka service in the same namespace with labels app=kafka and release=foundation Check your existing Cassandra and Kafka have the given labels. If you did not install foundation services from Agile Lifecycle Manager (ALM) with the Helm release name of foundation, then the release label may have an alternative value.</description></item><item><title>Architecture</title><link>/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/architecture/</guid><description>Objectives Introduce Agile Lifecycle Manager (ALM) software architecture
Software Architecture ALM software is deployed as separated distinct component sets which can be considered in two groups;
Core ALM consisting of a number of microservices Dependencies: Foundation functionality consisting of industry standard third party implementations Message Bus Data Persistence Authentication Server ALM Core application is realized by a number of microservices deployed on Kubernetes environment. Each microservice has a specific role/function within LM application and communicate with each other via RESTful APIs and through a Kafka message bus.</description></item><item><title>Create Resource</title><link>/user-guides/resource-engineering/resource-packages/brent/basic-resource/creating-resource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/resource-engineering/resource-packages/brent/basic-resource/creating-resource/</guid><description>Create the Resource Project Start by creating a directory for the Resource project and navigating to it
mkdir hw-apache2 &amp;amp;&amp;amp; cd hw-apache2
Use LMCTL to create the basis of a Resource project
lmctl project create --type Resource --rm brent
Each resource requires a resource descriptor in YAML format that is located in the &amp;lsquo;Definitions/lm/resource.yaml&amp;rsquo; file of the resource package. The format of this file is defined by the ALM Resource Descriptor YAML Specification.</description></item><item><title>Create Resource</title><link>/user-guides/resource-engineering/resource-packages/brent/infrastructure-keys-resource/creating-resource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/resource-engineering/resource-packages/brent/infrastructure-keys-resource/creating-resource/</guid><description>Create the Resource Project The resource comprises 2 Apache servers defined in a HEAT template (one that uses an existing SSH key pair pre-created in Openstack, the other uses a new SSH key pair created by the HEAT template) and configured by Ansible playbooks.
Start by creating a directory for the Resource project and navigating to it
mkdir hw-apache2 &amp;amp;&amp;amp; cd hw-apache2
Use LMCTL to create the basis of a Resource project</description></item><item><title>Enable Error Links</title><link>/user-guides/administration/configuration/error-links-running/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/administration/configuration/error-links-running/</guid><description>Enabling the dashboard links for a running ALM Add the following to the nimrod secret in vault: &amp;quot;alm.nimrod.loggingDashboard.application&amp;quot;: &amp;quot;kibana&amp;quot;,
&amp;quot;alm.nimrod.loggingDashboard.enabled&amp;quot;: &amp;quot;true&amp;quot;,
&amp;quot;alm.nimrod.loggingDashboard.endpoint&amp;quot;: &amp;quot;http://kibana.lm:31001&amp;quot;,
&amp;quot;alm.nimrod.loggingDashboard.kibana.index&amp;quot;: &amp;quot;lm-logs&amp;quot;
Create an index in Kibana named lm-logs
Delete the Nimrod pod
kubectl delete pod &amp;lt;nimrod pod id&amp;gt;&amp;gt;</description></item><item><title>Implement a Network Service</title><link>/user-guides/network-service-design/develop-a-network-service-package/implement-a-network-service-descriptor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/network-service-design/develop-a-network-service-package/implement-a-network-service-descriptor/</guid><description>Objectives Learn how to access Service Designer tool in Agile Lifecycle Manager (ALM) Create a new Assembly Descriptor working as a starting point for a new Network Service (NS) design Design the Network Service using the Designer Pre-requisites Before you begin following pre-requisites should be fulfilled:
Access to ALM environment with applicable user role assigned to the user account (see Installation and Config of ALM for more details on user roles) Necessary Virtual Network Function (VNF) packages developed and onboarded to the ALM environment (see Develop a VNF package for more details) Used the LMCTL command to create the NS project and pushed that into the environment Create a new Assembly Descriptor This step is only relevant if you have not created a NS project with LMCTL yet and you start one from scratch in the ALM Designer UI.</description></item><item><title>Installing ALM</title><link>/installation/lm/production/install-lm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/lm/production/install-lm/</guid><description>This section assumes you have followed the configuration steps and now have:
a helm-foundation Helm chart an lm-configurator Helm chart an lm-helm - Helm chart a custom values YAML file Installing with Helm You can now install the various LM Helm charts in the order listed above, using the helm install command
helm install &amp;lt;your-helm-chart&amp;gt; --name &amp;lt;your-release-name&amp;gt; --namespace &amp;lt;your-namespace&amp;gt; -f &amp;lt;your-custom-values-file&amp;gt; -f &amp;lt;your-additional-flavour-files&amp;gt;
cicdhub-helm-chart - path to the Helm chart your-release-name - unique name used to identify this installation in Helm your-namespace - Kubernetes namespace to install into (leave out to use default).</description></item><item><title>Manage Users with LDAP Admin</title><link>/user-guides/administration/security/users-ldap-admin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/administration/security/users-ldap-admin/</guid><description>The following guide is an extension of User Configuration with OpenLDAP with more detailed instructions for using LDAP Admin client. This guide is tested with version 1.8.3 of the client.
Pre-requisites To complete this guide you will need:
An existing installation of the Agile Lifecycle Manager (ALM) OpenLDAP accessible to your client LDAP Admin Client installed on your environment Connecting to OpenLDAP To get LDAP connection details follow this guide.</description></item><item><title>Managing Configuration</title><link>/user-guides/administration/configuration/configuring-lm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/administration/configuration/configuring-lm/</guid><description>Pre-requisites To follow this guide you will need:
an existing installation of the Agile Lifecycle Manager (ALM) Vault Many of the applications installed as part of the Lifecycle Manager load configuration from a configuration repository service. Vault is the chosen storage mechanism for any secure config required by the microservices. It is an industry standard approach to storing sensitive information and stores all secure config in a highly encrypted format.</description></item><item><title>Metric Recording</title><link>/reference/behaviour-testing/step-reference/metric-recording/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/behaviour-testing/step-reference/metric-recording/</guid><description>Start Recording Description Start recording metric values by monitoring Kafka for messages detailing a measurement for a given Resource and metric type.
You must create a metric definition before recording metrics, as this informs the monitor how to identify the Resource and metric type for each message.
Recording stops when explicitly requested with the Stop Recording step or when the scenario finishes.
Passes when:
the recording has started Fails when:</description></item><item><title>Onboarding</title><link>/user-guides/resource-engineering/drivers/onboarding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/resource-engineering/drivers/onboarding/</guid><description>Onboard Drivers You can onboard drivers with the resourcedriver add command from LMCTL v2.1+. Read more about all the commands from LMCTL resourcedriver command reference
Drivers by default run with SSL enabled and need to be onboarded with an SSL certificate that allows Brent to communicate with them. To retrieve the SSL certificate for a deployed driver (in base64-encoded PEM format), run the following command:
kubectl get secret &amp;lt;secretName&amp;gt; -o 'go-template={{index .</description></item><item><title>Sizing</title><link>/installation/lm/production/configuration/sizing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/lm/production/configuration/sizing/</guid><description>Configuring Sizing of Agile Lifecycle Manager (ALM) The default install of LM makes use of the default settings, which will deploy the Standard flavour of LM. This includes:
single instance of Foundation services execution of the LM configurator job to configure default settings single instance of ALM services, with all security features enabled Alternative Sizing Flavours The flavours directory included in the lm-helm-charts package contains helm values and other useful files for installing alternative recommended deployments of the ALM.</description></item><item><title>Access Configuration</title><link>/installation/cicdhub/access-config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/cicdhub/access-config/</guid><description>Hostnames and Ports By default, the CI/CD Hub services are configured for access as described below:
Service Type Address nexus NodePort &amp;lt;your-cicdhub-host&amp;gt;:32739 gogs NodePort &amp;amp; Ingress &amp;lt;your-cicdhub-host&amp;gt;:32734 OR git.cicdhub:&amp;lt;nginx-ingress-port&amp;gt; jenkins NodePort &amp;amp; Ingress &amp;lt;your-cicdhub-host&amp;gt;:32732 OR jenkins.cicdhub:&amp;lt;nginx-ingress-port&amp;gt; openldap NodePort &amp;lt;your-cicdhub-host&amp;gt;:32737, SSL: https://&amp;lt;your-cicdhub-host&amp;gt;:32738 docker registry NodePort &amp;lt;your-cicdhub-host&amp;gt;:32736 nginx-ingress NodePort &amp;lt;your-cicdhub-host&amp;gt;:32080, SSL: https://&amp;lt;your-cicdhub-host&amp;gt;:32443 All ports and Ingress hosts listed above are configurable through the Helm chart.</description></item><item><title>Access Configuration</title><link>/installation/resource-manager/ansible-rm/access-config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/resource-manager/ansible-rm/access-config/</guid><description>Hostnames and Ports The Ansible RM is configured to allow access through NodePorts. The default values for the HTTP and HTTPS ports are shown below. Override any defaults by adding them to your custom values.
service:
nodePort: 31080
sslNodePort: 31081
Next Steps You may now complete your installation of the Ansible RM</description></item><item><title>Add Shared Infrastructure Key to LM</title><link>/user-guides/resource-engineering/resource-packages/brent/infrastructure-keys-resource/creating-shared-infrastructure-key/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/resource-engineering/resource-packages/brent/infrastructure-keys-resource/creating-shared-infrastructure-key/</guid><description>Add the Shared Infrastructure Key to LM See infrastructure key management for a general introduction to infrastructure keys.
The resource descriptor defines a server1_ssh_key key property which is populated with the apache1_server_key shared infrastructure key by LM when the Resource driver that stands up the Openstack Apache instance is called. This (SSH) key is assumed to already exist in Openstack (see prerequisites), and also needs to be added (at least the private key portion) as a shared infrastructure key to LM to allow Resource drivers to communicate with the infrastructure in order to provision it.</description></item><item><title>Create New Project</title><link>/user-guides/cicd/developing-a-project/create-new-vnf-project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/cicd/developing-a-project/create-new-vnf-project/</guid><description>Objectives Create a new VNF or Network Service project that will hold all of its descriptor, test and lifecycle script artifacts.
Pre-requisites Access to a CI/CD Hub and a development environment with a Lifecycle Manager and VIM
Design details of the new VNF or Network Service.
VNFCs or VNFs it will contain (name and version)
Software Images associated with each VNFC. (There may be multiple images for each target VIM type, e.</description></item><item><title>Creating Resource Drivers</title><link>/user-guides/resource-engineering/drivers/creating-drivers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/resource-engineering/drivers/creating-drivers/</guid><description>Introduction You may create your own resource driver to support integration with virtual infrastructure and to complete transitions and operations with different scripting mechanisms. The driver must fulfill resource driver APIs and be capable of accepting HTTP requests and returning responses asynchronously on Kafka.
The programming language used to create the driver is at the discretion of the user. The SOL 003 Lifecycle Driver is a good example of writing a driver with Java.</description></item><item><title>Instantiate Resource</title><link>/user-guides/resource-engineering/resource-packages/brent/basic-resource/instantiate-resource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/resource-engineering/resource-packages/brent/basic-resource/instantiate-resource/</guid><description>Push Resource Push the Resource project to your target environment with LMCTL
lmctl project push example-env
Add Resource to design Create a new Assembly in the Agile Lifecycle Manager (ALM) UI
Open the Assembly design and click &amp;ldquo;Add Element&amp;rdquo; in the top right
Add an element using the hw-apache2 Resource descriptor now available in the environment
Select the &amp;ldquo;apache2-service&amp;rdquo; node in the designer and open the right hand panel by selecting the menu icon in the top right</description></item><item><title>Manage Client Credentials</title><link>/user-guides/administration/security/manage-client-credentials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/administration/security/manage-client-credentials/</guid><description>The following guide details how to configure Client Credentials in Agile Lifecycle Manager (ALM) on a deployed system. These credentials are required to make API requests from external API clients and integrated systems. To assist in maintaining a secure system it is recommended that each external client have its own set of credentials.
Pre-requisites To complete this guide you will need:
An existing installation of the ALM A REST client Understanding of how to make authenticated requests to LM Add client credentials Client credentials can be created using the credentials REST API.</description></item><item><title>Metric Assertions</title><link>/reference/behaviour-testing/step-reference/metric-assertions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/behaviour-testing/step-reference/metric-assertions/</guid><description>Verify always under threshold Description Checks that all values seen whilst recording a metric are under a given value. Any values equal or over the threshold will cause the step to return a status of failed.
Passes when:
all values for the recorded metric are under the given threshold Fails when:
any values for the recorded metric are equal to or over the given threshold Properties Property Description metricName Name given to a metric being recorded in this scenario thresholdValue A numeric value representing the threshold Verify always over threshold Description Checks that all values seen whilst recording a metric are over a given value.</description></item><item><title>Scale a Running ALM</title><link>/user-guides/administration/configuration/upgrade-scaling-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/administration/configuration/upgrade-scaling-policy/</guid><description>The following guide explains how to upgrade a running Agile Lifecycle Manager (ALM) to scale with CPU usage.
Pre-requisites: The Kubernetes metrics server must be running in your Kubernetes environment for scaling of ALM to work. Configure ALM Existing installations of ALM can be scaled by adding an Horizontal Pod Autoscaler via kubectl.
For each service that you want to scale do the following:
Ensure that the service has resources set, you can do this by running: kubectl describe deployment &amp;lt;service name&amp;gt;
If the deployment has resources set then you will see the following:</description></item><item><title>Security</title><link>/installation/lm/production/configuration/security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/lm/production/configuration/security/</guid><description>Configuring Security in Lifecycle Manager The recommended installation of Lifecycle Manager is with security enabled. This will give the following benefits:
HTTPS access to services Role-based Access Control to the Lifecycle Manager user interface Protected access to LM APIs Disabling Security The easiest way to disable security during installation is by including the No Security flavour
No Security Flavour Directory: no-security This flavour disables LM security and is intended for development/testing purposes.</description></item><item><title>Utilities</title><link>/reference/behaviour-testing/step-reference/utilities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/behaviour-testing/step-reference/utilities/</guid><description>Delay Description Delay the scenario from continuing for a specified time period. This does not prevent any background tasks, such as metric recording, from continuing.
Properties Property Description sleepTime Numeric value representing the amount of time to delay (unit specified by timeUnit property) timeUnit Unit of measurement for the sleepTime property: milliseconds, seconds, minutes</description></item><item><title>Add Lifecycle</title><link>/user-guides/resource-engineering/resource-packages/brent/basic-resource/add-lifecycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/resource-engineering/resource-packages/brent/basic-resource/add-lifecycle/</guid><description>Create Lifecycle and Operation Scripts The next step is to create scripts for the the standardized lifecycles (start, stop, configure, install, integrity and uninstall) and operations defined in the resource descriptor.
The scripts may be implemented using any scripting language of choice, as long as there is a Resource Driver capable of executing them. Scripts are located in a subdirectory of the &amp;lsquo;Lifecycle&amp;rsquo; directory of the resource package, named after the type of the Resource driver that will use them.</description></item><item><title>End Users</title><link>/users/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/users/</guid><description>End Users of Agile Lifecycle Manager (ALM) The types of users for ALM can be divided into a set of roles based on their main responsibility:
VNF Engineering Network Service Design Installation and Administration Operations The main use cases of the user roles are described below.
VNF Engineering The VNF Engineer is a VNF subject matter expert with responsibility for the creation and/or onboarding of third party VNF software through the creation of an operational package that can be managed by ALM.</description></item><item><title>Finalize a Project</title><link>/user-guides/network-service-design/develop-a-network-service-package/finalize-a-project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/network-service-design/develop-a-network-service-package/finalize-a-project/</guid><description>At this stage, you have created your NS and behaviour tests, and you are happy with the design. You can pull the project back to your local directory before pushing it to your GIT.
Pull project to local directory If you want to pull the design you have made in the ALM UI into your local project directory run the following command:
lmctl project pull dev
This will pull all NS artifacts you created in the designer out from your ALM development installation into your local directory.</description></item><item><title>Instantiate Resource</title><link>/user-guides/resource-engineering/resource-packages/brent/infrastructure-keys-resource/instantiate-resource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/resource-engineering/resource-packages/brent/infrastructure-keys-resource/instantiate-resource/</guid><description>Push Resource Push the Resource project to your target environment with LMCTL
lmctl project push example-env
Add Resource to design Create a new Assembly in the Agile Lifecycle Manager (ALM) UI
Open the Assembly design and click &amp;ldquo;Add Element&amp;rdquo; in the top right
Add an element using the hw-apache2 Resource descriptor now available in the environment
Select the &amp;ldquo;apache2-service&amp;rdquo; node in the designer and open the right hand panel by selecting the menu icon in the top right</description></item><item><title>Managing Vault Tokens</title><link>/user-guides/administration/security/managing-vault-tokens/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/administration/security/managing-vault-tokens/</guid><description>Managing Vault Tokens Vault tokens do not have an indefinite expiry and will need to be renewed or regenerated after their expiration. By default, the Vault token used by LM to access configuration will be created with a duration as per the default value configured in the Vault settings, i.e.
vault: vault: config: max_lease_ttl: 87600h # this is the maximum duration a token can exist, before which it can be renewed, after which it will be revoked default_lease_ttl: 87600h # this is the default duration a token will exist, after which it will be revoked, unless renewed Expired LM Vault Tokens If the Vault token used by LM expires, then any services in LM will be unable to access configuration, and as such will be unable to start.</description></item><item><title>Security</title><link>/installation/cicdhub/security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/cicdhub/security/</guid><description>Access Credentials Many of the CI/CD Hub services have default usernames and passwords that may only be changed after installation. However, a few allow a value to be provided through the custom values.
The default values for each service are shown below. Override any defaults by adding them to your custom values.
global:
## Note that the Openldap password is set through a global variable
ldap:
managerPassword: admin
domain: lm.com
gogs:
postgresql:
postgresUser: admin
postgresPassword: admin
jenkins:
master:
adminUser: admin
adminPassword: admin
Default credentials for any service not shown here will be detailed later in the installation.</description></item><item><title>Storage</title><link>/installation/lm/production/configuration/storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/lm/production/configuration/storage/</guid><description>Storage Class By default, any service requiring persistence is configured to use the default provisioner of your Kubernetes cluster. You can check your default with kubectl:
kubectl get storageclass
The default storage class will be shown with (default) alongside it&amp;rsquo;s name. If you have no default, you can mark an existing class as the default with:
kubectl patch storageclass &amp;lt;your-class-name&amp;gt; -p '{&amp;quot;metadata&amp;quot;: {&amp;quot;annotations&amp;quot;:{&amp;quot;storageclass.kubernetes.io/is-default-class&amp;quot;:&amp;quot;true&amp;quot;}}}'
Alternatively, you may explicitly set the storage class for each service by adding storageClass fields into your custom values file.</description></item><item><title>Uploading Images</title><link>/user-guides/cicd/developing-a-project/upload-images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/cicd/developing-a-project/upload-images/</guid><description>Objectives Manage versions of all VNF or test software images in a general repository. Making the images available in a formal manner to the CI/CD tools.
Pre-requisites You are provided with the software images to upload on your local machine. Repository Structure The image directory structure in the CI/CD nexus general repository is as follows:
.
├── raw
└── vdus
└── &amp;lt;vdu-name&amp;gt;
├── &amp;lt;image-name-version&amp;gt;.&amp;lt;type&amp;gt;
├── image-3.4.12.qcow2
├── image-3.4.00.tar To upload an image into nexus:</description></item><item><title>Add Lifecycle</title><link>/user-guides/resource-engineering/resource-packages/brent/infrastructure-keys-resource/add-lifecycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/resource-engineering/resource-packages/brent/infrastructure-keys-resource/add-lifecycle/</guid><description>Create Lifecycle and Operation Scripts The next step is to create scripts for the the standardized lifecycles (start, stop, configure, install, integrity and uninstall) and operations defined in the resource descriptor.
The scripts may be implemented using any scripting language of choice, as long as there is a Resource Driver capable of executing them. Scripts are located in a subdirectory of the &amp;lsquo;Lifecycle&amp;rsquo; directory of the resource package, named after the type of the Resource driver that will use them.</description></item><item><title>Configuring External LDAP Connections</title><link>/reference/security/configuring-external-ldap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/security/configuring-external-ldap/</guid><description>Agile Lifecycle Manager (ALM) makes use of LDAP as its user store for secure access. It is configured by default to connect to the OpenLDAP service which is part of the installation. It is possible to disable this installation of this OpenLDAP service, and to connect to an external LDAP implementation using different mechanisms including support for Active Directory.
Configuring an External LDAP Server To use an LDAP Server other than the pre-configured OpenLDAP instance which comes as part of the LM installation, follow these steps.</description></item><item><title>Create CI Pipeline</title><link>/user-guides/cicd/pipeline/create-ci-pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/cicd/pipeline/create-ci-pipeline/</guid><description>Objectives Create a continuous integration (CI) pipeline that will automatically build and test VNF or Network Service packages when changes are detected in Git projects. This CI pipeline will be triggered when there is a check-in to the master branch of the VNF or Network Service git project.
Pre-requisites All VNF and Network Services packages the VNF or Network Service project under development depends on for both testing and when it is released.</description></item><item><title>Deployment Location</title><link>/reference/lm-api/api-definition/resource-manager/deployment-location-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lm-api/api-definition/resource-manager/deployment-location-api/</guid><description>The following details the API used to manage Deployment Locations within LM.
Associated with each definition are details of the request parameters and responses. These include the name of each field plus a brief description and whether the field is mandatory. Whether a field is required or not is based on the context of the examples. The underlying API definition may mark a field as optional, but in some contexts, the fields must be supplied.</description></item><item><title>External LDAP</title><link>/installation/lm/production/configuration/external-ldap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/lm/production/configuration/external-ldap/</guid><description>Agile Lifecycle Manager (ALM) makes use of LDAP as its user store for secure access. It is configured by default to connect to the OpenLDAP service which is part of installation. Is is possible to disable this installation of this OpenLDAP service, and to connect to an external LDAP implementation. This includes support for Active Directory.
Configuring an External LDAP Server To use an LDAP Server other than the pre-configured OpenLDAP instance which comes as part of the LM installation, follow these steps.</description></item><item><title>Asynchronous State Change Events</title><link>/reference/lm-api/api-definition/asynchronous-state-change-events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lm-api/api-definition/asynchronous-state-change-events/</guid><description>LM emits events when the state of an assembly and its components changes. Messages that are sent asynchronously are put onto a Kafka bus. The exact topics can be configured. These are emitted in response to Intent Requests causing the state of the Assembly Instance, or its associated components, to change. In the event of a failure to change state, an event will also be emitted.
Associated with each example is a table explaining the fields in the example.</description></item><item><title>Create Release Pipeline</title><link>/user-guides/cicd/pipeline/create-release-pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/cicd/pipeline/create-release-pipeline/</guid><description>Objectives Create a release pipeline that will package a VNF or Network Service project into a binary package.
Pre-requisites CI Pipeline has already been configured and tested. Introduction This pipeline will be triggered when there is a check-in to the master branch. It will:
Checkout the project (tagged version) Check that all packages this project depends on in release have also been released (i.e. not SNAPSHOT versions) Check this version of the project has not already been released Rename the package in nexus (remove the SNAPSHOT) If the project is a NS, then deploy it&amp;rsquo;s package, and all the packages it depends on for release to the production LM.</description></item><item><title>Infrastructure Keys</title><link>/reference/lm-api/api-definition/resource-manager/infrastructure-keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lm-api/api-definition/resource-manager/infrastructure-keys/</guid><description>The following section details the APIs used to manage Infrastructure Keys.
Associated with each definition are details of the request parameters and responses. These include the name of each field plus a brief description and whether the field is mandatory. Whether a field is required or not is based on the context of the examples. The underlying API definition may mark a field as optional, but in some contexts, the fields must be supplied.</description></item><item><title>Scaling ALM</title><link>/installation/lm/production/configuration/scaling-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/lm/production/configuration/scaling-policy/</guid><description>The following guide explains how to prepare Agile Lifecycle Manager (ALM) to scale with CPU usage.
Pre-requisites: The Kubernetes metrics server must be running in your Kubernetes environment for scaling of ALM to work. Configure ALM ALM services can be setup to scale from the point they are installed by setting some custom helm values. Each service has configurable options for resources and autoscaling thresholds.
Before running a helm install of ALM you can create a custom values file with content like the following for each service:</description></item><item><title>Developing a Package</title><link>/user-guides/cicd/developing-a-project/developing-new-vnf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/cicd/developing-a-project/developing-new-vnf/</guid><description>Objectives Develop VNF or Network Service project artifacts that, when complete, will constitute a releasable package.
Pre-requisites CI/CD Hub and a development environment with a dedicated Agile Lifecycle Manager (ALM) and VIM A VNF or Network Service project already exists. Developing a VNF or Network Service Descriptor Push your project into dev environment (assume this is called &amp;lsquo;dev&amp;rsquo; in the LMCONFIG file for LMCTL):
$ cd &amp;lt;myvnf dir&amp;gt;
$ lmctl project push dev
Design the VNF or Network Service Descriptor</description></item><item><title>Install Error Links</title><link>/installation/lm/production/configuration/error-links-install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/lm/production/configuration/error-links-install/</guid><description>Direct links to a logging dashboard can be enabled in the Agile Lifecycle Manager (ALM) User Interface. This is an optional feature that will generate a link to a relevant search in a logging dashboard based on any error that has occurred in an assembly instance. The link displays like this:
Enabling the dashboard links during ALM installation Create a values YAML file the following content in order to enable the logging dashboard: configurator:
loggingDashboard:
enabled: true
## The domain used to connect to the logging dashboard UI
endpoint: http://kibana.</description></item><item><title>Releasing a package</title><link>/user-guides/cicd/developing-a-project/release-package/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/cicd/developing-a-project/release-package/</guid><description>Objectives Release a VNF or Network Service package that has been confirmed ready for production use to a production environment
Pre-requisites The VNF or Network Service package is available in the Nexus general repository and marked ready for production deployment. Introduction When a package has been developed and its been agreed that it has been fully tested by its stakeholders, it can be released.
Releasing a VNF or Network Service package is done by triggering the Release pipeline job manually in Jenkins and giving the version of the package to deploy.</description></item><item><title>Resource Drivers</title><link>/reference/lm-api/api-definition/resource-manager/resource-drivers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lm-api/api-definition/resource-manager/resource-drivers/</guid><description>The following section details the APIs used to manage Brent Resource drivers.
Associated with each definition are details of the request parameters and responses. These include the name of each field plus a brief description and whether the field is mandatory. Whether a field is required or not is based on the context of the examples. The underlying API definition may mark a field as optional, but in some contexts, the fields must be supplied.</description></item><item><title>Resource Health Events</title><link>/reference/lm-api/api-definition/resource-health-events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lm-api/api-definition/resource-health-events/</guid><description>Integrity Events These events are sent to enable a resource to indicate if a resource is working or broken.
Example Integrity Metric Event {
&amp;quot;metricKey&amp;quot; : &amp;quot;142971c5-a84b-4d34-af15-435ba8640aec&amp;quot;,
&amp;quot;metricName&amp;quot; : &amp;quot;h_integrity&amp;quot;,
&amp;quot;integrity&amp;quot; : &amp;quot;OK&amp;quot;,
&amp;quot;message&amp;quot; : &amp;quot;Everything is working&amp;quot;
}
Field Details Field Description Mandatory metricKey The key given to the resource manager when the resource was created as a token to be used within these messages Yes metricName The name of the metric as defined in the resource descriptor Yes integrity A value indicating if the resource associated with the metric Key is working allowed values are “OK” for working and “BROKEN” when healing is required Yes message An optional test string to include information about the integrity of the resource.</description></item><item><title>Add Tests to Package</title><link>/user-guides/cicd/developing-a-project/add-tests-to-package/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/cicd/developing-a-project/add-tests-to-package/</guid><description>Objectives This section shows how to add VNF functional behaviour tests or Network Service performance and interoperability test artifacts to your project structure in the CI/CD Hub.
Pre-requisites Development VIM and CI/CD Hub and ALM up and running LMCTL setup on your local machine with a profile configured for the above development environment VNF design documenting how test scenarios are expected to be run and the metrics and behaviour from all participating VNFs that constitute a successful test run.</description></item><item><title>Authenticated API Requests</title><link>/user-guides/authenticated-api-requests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/authenticated-api-requests/</guid><description>This guide details how to connect from a calling system into the Agile Lifecycle Manager (ALM) APIs securely.
Pre-requisites an existing installation of the ALM a valid set of client credentials which can be used for authentication. If not, see Managing Client Credentials Making an API call LM uses the standard OAuth 2.0 mechanism to authenticate incoming API requests. This requires some additional tokens to be setup in the headers of any HTTPS request that is made.</description></item><item><title>Error Responses</title><link>/reference/lm-api/api-definition/error-responses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lm-api/api-definition/error-responses/</guid><description>All the API calls described in this section will return the following information in the Response Body when an error is encountered (e.g. for a 404, 403, 500 Response Code):
{
&amp;quot;details&amp;quot;: {},
&amp;quot;localizedMessage&amp;quot;: &amp;quot;string&amp;quot;,
&amp;quot;url&amp;quot;: &amp;quot;string&amp;quot;
}
Response properties
Field Description details Any additional information related to the error that may be useful during debugging localizedMessage User-friendly description of the error that has occurred url the URL of the root cause of the problem or null if unknown</description></item><item><title>Install</title><link>/installation/cicdhub/install-cicdhub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/cicdhub/install-cicdhub/</guid><description>This section assumes you have followed the configuration steps and now have:
a CI/CD Hub Helm chart a custom values YAML file Installing with Helm Install CI/CD Hub with the helm install command:
Standard:
helm install &amp;lt;cicdhub-helm-chart&amp;gt; --name &amp;lt;your-release-name&amp;gt; --namespace &amp;lt;your-namespace&amp;gt; -f &amp;lt;your-custom-values-file&amp;gt;
ICP:
helm install &amp;lt;cicdhub-helm-chart&amp;gt; --name &amp;lt;your-release-name&amp;gt; --namespace &amp;lt;your-namespace&amp;gt; -f &amp;lt;your-custom-values-file&amp;gt; --tls
cicdhub-helm-chart - path to the CI/CD Hub Helm chart your-release-name - unique name used to identify this installation in Helm your-namespace - Kubernetes namespace to install into (leave out to use default) your-custom-values-file - path to the YAML file created with any configuration overrides (if you have any) For example:</description></item><item><title>Install</title><link>/installation/resource-manager/ansible-rm/install-ansible-rm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installation/resource-manager/ansible-rm/install-ansible-rm/</guid><description>This section assumes you have followed the configuration steps and now have:
an Ansible RM Helm chart a custom values YAML file a target Kubernetes namespace with Agile Lifecycle Manager (ALM) installed Installing with Helm Install the Ansible RM with the helm install command.
helm install &amp;lt;ansible-rm-helm-chart&amp;gt; --name &amp;lt;your-release-name&amp;gt; --namespace &amp;lt;your-namespace&amp;gt; -f &amp;lt;your-custom-values-file&amp;gt;
ansible-rm-helm-chart - path to the Ansible RM Helm chart your-release-name - unique name used to identify this installation in Helm your-namespace - Kubernetes namespace with LM already installed your-custom-values-file - path to the YAML file created with any configuration overrides (if you have any) For example:</description></item><item><title>Interface Architecture</title><link>/reference/lm-api/interface-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lm-api/interface-architecture/</guid><description>The Agile Lifecycle Manager (ALM) API is responsible for interactions with the operations available from LM.
API Interaction Principles Each of the major components within ALM have been built as micro-services using HTTP as the transport mechanism for requests and responses.
The ALM API uses a combination of REST style interfaces and RPC interfaces.
The RPC-style interface is used to submit Intents to ALM. All other interfaces use a REST-style.</description></item><item><title>Resource Managers</title><link>/reference/lm-api/api-definition/resource-manager/resource-managers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lm-api/api-definition/resource-manager/resource-managers/</guid><description>The following details the API used to manage Resource Managers within LM.
Associated with each definition are details of the request parameters and responses. These include the name of each field plus a brief description and whether the field is mandatory. Whether a field is required or not is based on the context of the examples. The underlying API definition may mark a field as optional, but in some contexts, the fields must be supplied.</description></item><item><title>Introduction</title><link>/best-practices/demos/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/best-practices/demos/introduction/</guid><description>Agile Lifecycle Manager (ALM) Demonstrations This section introduces a set of working ALM demonstrations. With working code and scripted scenarios to help you get up and running quickly.
CI/CD Automated Pipeline Description: Setup and use an automated CI/CD Pipeline to automate on-boarding, test, and deployment of an example Voice Service. Key points: Automated pipeline, automated behaviour driven testing, automated environment creation, automated binary package store Link: CI/CD pipeline Coming soon Dummy EPC End to End VoIP Service NFVI Automation</description></item><item><title>Resource Packages</title><link>/reference/lm-api/api-definition/resource-manager/resource-packages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lm-api/api-definition/resource-manager/resource-packages/</guid><description>The following section details the APIs used to manage Resource packages intended for the Brent (carrier-grade Resource Manager included with LM).
Associated with each definition are details of the request parameters and responses. These include the name of each field plus a brief description and whether the field is mandatory. Whether a field is required or not is based on the context of the examples. The underlying API definition may mark a field as optional, but in some contexts, the fields must be supplied.</description></item><item><title>Updating a package</title><link>/user-guides/cicd/developing-a-project/update-package/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/cicd/developing-a-project/update-package/</guid><description>Objectives Update a VNF or NS Project after Release
One a version of a project has been packaged and released it cannot be updated. A new version must be created and tested.
Pre-requisites Existing package
New package
Update Project to next version In the case where you want to update the last version:
Checkout the project on the develop branch Edit the projects descriptor (VNF or NS) to increment the version Edit the the Behaviour test template for the NS or VNF being tested to the new version make changes to your project for the update.</description></item><item><title>CI/CD Pipeline demonstration</title><link>/best-practices/demos/cicd-pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/best-practices/demos/cicd-pipeline/</guid><description>Objectives This working demonstration showcases Agile Lifecycle Manager (ALM) automated CI/CD capabilities. The demo will show the following
Automated triggering of Network Service or VNF build from a Git project source change. Creation of a pre-production environment and all VNF or test dependencies required to run the updated Network Service. Automated behaviour testing of the updated Network Service On success the network service binary package is built with an appropriate version number and stored in Nexus Pre-requisites Have read the CI/CD Hub Introduction Working CI/CD Hub and ALM environment Install local LMCTL Working Docker Environment to run VNFs Installing the Demo Clone the Agile Lifecycle Manager (ALM) demo artifacts from GitHub to your local machine</description></item><item><title>Sequence</title><link>/reference/lm-api/scenarios/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lm-api/scenarios/</guid><description>Resource Manager Handling Resource Manager Onboarding When a resource manager is onboarded, Agile Lifecycle Manager (ALM) invokes a set of calls to the Resource Manager detailed in the Resource Manager API document.
Delete Resource Manager Get Resource Manager Details Update Resource Manager The resource manager returns the details of the resources and locations, and ALM will store any new details. ALM will not remove any existing details.
Assembly Creation and State Transition Healing Scaling Scale Out ​ ScaleIn ​ Topology Requests</description></item><item><title/><link>/_footer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/_footer/</guid><description/></item><item><title/><link>/_header/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/_header/</guid><description/></item><item><title>Assembly Configuration</title><link>/reference/lm-api/api-definition/behavior-testing-api/assembly-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lm-api/api-definition/behavior-testing-api/assembly-configuration/</guid><description>The following details the API to manage Assembly Configurations within LM.
Associated with each definition are details of the request parameters and responses. These include the name of each field plus a brief description and whether the field is mandatory. Whether a field is required or not is based on the context of the examples. The underlying API definition may mark a field as optional, but in some contexts, the fields must be supplied.</description></item><item><title>Assembly Intents</title><link>/reference/lm-api/api-definition/topology/managing-assemblies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lm-api/api-definition/topology/managing-assemblies/</guid><description>This section covers the APIs used to manage Assembly instances during their life. It is based around the state model of Agile Lifecycle Manager (ALM)
Associated with each definition are details of the request parameters and responses. These include the name of each field plus a brief description and whether the field is mandatory. Whether a field is required or not is based on the context of the examples. The underlying API definition may mark a field as optional, but in some contexts, the fields must be supplied.</description></item><item><title>CI/CD Hub Software Overview</title><link>/reference/cicdhub-software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/cicdhub-software/</guid><description>CI/CD Hub The CI/CD Hub is a reference deployment of a best practice suite of Continuous Integration and Continuous Delivery (CI/CD) tools. These collectively providing an infrastructure for Assembly and Resource package and descriptor development, release and distribution management. It leverages common, open source, third party tools augmenting Agile Lifecycle Manager (ALM) specific tools to enable an integration with one or more ALM instances as part of a holistic CI/CD environment.</description></item><item><title>Deployment Model</title><link>/reference/deployment-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/deployment-model/</guid><description>Introduction This section introduces the deployment architecture and main configuration options for Agile Lifecycle Manager (ALM) for a typical CI/CD configuration. It is expected that multiple ALMs will be deployed to automate the various tasks for each stage of the CI/CD process. Each set of LMs are coordinated around a repository of artifacts representing the external resources under management. The picture below shows a typical deployment. See here for more information on a typical LM CI/CD process.</description></item><item><title>Descriptors</title><link>/reference/lm-api/api-definition/topology/catalog-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lm-api/api-definition/topology/catalog-api/</guid><description>The following details the API to manage descriptors within LM. Assembly descriptors can be added, listed, updated and deleted. Resource descriptors can be listed and deleted but can only be added or updated through the Resource Manager API.
Associated with each definition are details of the request parameters and responses. These include the name of each field plus a brief description and whether the field is mandatory. Whether a field is required or not is based on the context of the examples.</description></item><item><title>Executing Intents</title><link>/user-guides/behaviour-testing/designing-scenarios/executing-intents/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/behaviour-testing/designing-scenarios/executing-intents/</guid><description>The following guide shows you how to use the Intent Engine and Intent Request steps to execute lifecycle intents on Assemblies as part of a scenario.
Executing Synchronous Intents The steps in the &amp;ldquo;Intent Engine&amp;rdquo; group allow you to execute intents on Assemblies and wait for their completion. The target Assembly of the intent can be one created as part of the scenario or an existing Assembly you know exists.</description></item><item><title>Executions</title><link>/reference/lm-api/api-definition/behavior-testing-api/executions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lm-api/api-definition/behavior-testing-api/executions/</guid><description>This section details the APIs for executing Scenarios and viewing the results.
Associated with each definition are details of the request parameters and responses. These include the name of each field plus a brief description and whether the field is mandatory. Whether a field is required or not is based on the context of the examples. The underlying API definition may mark a field as optional, but in some contexts, the fields must be supplied.</description></item><item><title>Existing Provided Assembly</title><link>/user-guides/behaviour-testing/designing-scenarios/existing-provided-assembly/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/behaviour-testing/designing-scenarios/existing-provided-assembly/</guid><description>The &amp;ldquo;Existing Provided Assembly&amp;rdquo; entry, found in the &amp;ldquo;Assembly Configurations&amp;rdquo; section of the scenario palette, is available to all scenarios. Adding it to the scenario will add an input property to the scenario, which must be set each time it is executed.
The following guide shows you to use the &amp;ldquo;Existing Provided Assembly&amp;rdquo; configuration in your scenarios.
Add Existing Provided Assembly Add the &amp;ldquo;Existing Provided Assembly&amp;rdquo; entry by dragging it from the scenario palette into the &amp;ldquo;Assemblies&amp;rdquo; panel at the top of the scenario</description></item><item><title>Glossary of Terms</title><link>/reference/glossary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/glossary/</guid><description>Agile Lifecycle Manager (ALM) uses a number of terms which have very specific meaning in its context. In some cases these terms are used in other products or industries to mean slightly different things. It is important that the user understand these terms in the context of ALM
Assembly Assembly is a definition of a service and may comprise of one or more resources and/or other assemblies. It is defined in an Assembly Descriptor and can be instantiated as an Assembly Instance.</description></item><item><title>ICP Advice</title><link>/reference/icp-pre-install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/icp-pre-install/</guid><description>ICP Pre-Install Considerations This section details topics that should be considered when installing the CI/CD Hub and/or Agile Lifecycle Manager (ALM) to ICP.
Helm Install the Helm client using the ICP instructions.
Pod Security Policy If you are installing CI/CD Hub or Agile Lifecycle Manager (ALM) on ICP, you should do so in a namespace that is bound to a less restrictive Pod Security Policy. We recommend creating a new namespace and binding it to an existing policy called ibm-anyuid-psp.</description></item><item><title>Identifying Issues</title><link>/user-guides/operations/identifying-issues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/operations/identifying-issues/</guid><description>View Log Files While Agile Lifecycle Manager (ALM) logs are generated on and can be viewed on individual pods (per service instances) using kubectl logs, in real terms this is impractical to do and gain a holistic view of system operation through the logs. Viewing logs from the collective logs in Elasticsearch using Kibana is both more effective and usable.
When viewing logs it is important to first ensure that the log level has the level of detail you require.</description></item><item><title>Infrastructure Key Management</title><link>/user-guides/operations/infrastructure-key-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/operations/infrastructure-key-management/</guid><description>Introduction An Infrastructure Key is a key comprising private and/or public keys (SSH keys) used when provisioning and communicating with infrastructure. Infrastructure keys are managed by LM (Brent), which provides REST APIs to manage them. The keys themselves are not exposed north-bound of Brent, only their names see resource descriptor key properties. Brent will dynamically substitute any key names in properties with the real key (public and private portions, if defined) before sending the key material over an SSH HTTP connection to Resource drivers.</description></item><item><title>Lifecycle Manager Architecture</title><link>/reference/stratoss-lm-software-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/stratoss-lm-software-architecture/</guid><description>Overview Agile Lifecycle Manager (ALM) software application is deployed as separated distinct component sets which can be considered in two groups;
Core ALM consisting of a number of microservices Dependencies: Foundation functionality consisting of industry standard third party implementations Message Bus Data Persistence Authentication Server ALM Core Microservices The ALM microservices are namely:
User Interface Host for ALM User Interface. API Gateway A gateway for the full set of published ALM APIs used by the ALM User Interface and available for use by any number of configured Client applications.</description></item><item><title>Lifecycle Manager Architecture -- State Models</title><link>/reference/state-models/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/state-models/</guid><description>Component State Model Assemblies and resources have a predefined state model (comparable to TOSCA) as defined in the diagram below.
Components flow through this state model by performing lifecycle transitions. Resources can define which transitions they support (in their descriptors) but an assembly will always transition through
In addition to the five transitions shown below, resources can implement the Integrity transition, representing a functional “smoke test” which is performed prior to the resource becoming Active and after the Start Lifecycle Transition</description></item><item><title>LMCTL</title><link>/reference/lmctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lmctl/</guid><description>LMCTL is a command-line client for the Agile Lifecycle Manager (ALM) that provides commands for interacting with LM environments. It includes an opinionated pattern for managing service designs during the CI/CD lifecycle as projects, to produce packages suitable for release into production.
Please use version 2.5.0 of the LMCTL documentation with 2.2.0 of ALM.
lmctl - LM version compatibility:
LM Version lmctl Version 2.</description></item><item><title>Log Management</title><link>/user-guides/operations/log-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/operations/log-management/</guid><description>Logging and Log Management Agile Lifecycle Manager (ALM) generates logs across all of its microservices. These logs are generated locally and shipped to Elasticsearch where they are persisted and can be retrieved/searched
Log tracing across ALM can be a challenge if not done correctly:
There are ~9 discrete microservices Each is realized by N service instances Most services are stateless thus load/requests are evenly load balanced across these service instances.</description></item><item><title>Manage Instances</title><link>/user-guides/operations/manage-instances/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/operations/manage-instances/</guid><description>This section describes the steps required to request an intent on a Network Service Instance, and then view the topology of the instance and the execution of the intent. A Network Service Instance is created from an already existing Network Service Design.
Objectives Learn how to request an intent on a Network Service Instance View the execution of the intent View the topology of the Network Service Instance Pre-requisites An existing Network Service Design Access to the UI of a running instance of Agile Lifecycle Manager (ALM) Assembly Instances Recent Assembly Instances Once Network Services and VNFs are designed, they can be put into production.</description></item><item><title>Monitor Assembly Events</title><link>/user-guides/behaviour-testing/designing-scenarios/monitoring-assembly-events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/behaviour-testing/designing-scenarios/monitoring-assembly-events/</guid><description>The steps in the &amp;ldquo;Assembly Events&amp;rdquo; group allow you to check intents have occurred on an Assembly. This is usually done to check a Heal or Scale has taken place on an Assembly when a policy is triggered.
Check Assembly Process Success If you have a scenario which simulates traffic/metrics to trigger a policy on your Assembly, then you can check the expected Heal or Scale takes place by adding the &amp;ldquo;Check for currently in progress process&amp;rdquo; or &amp;ldquo;Check for successful process&amp;rdquo; steps.</description></item><item><title>Processes</title><link>/reference/lm-api/api-definition/topology/process-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lm-api/api-definition/topology/process-api/</guid><description>This section covers the APIs used to view processes running against Assembly instances during their life.
Associated with each definition are details of the request parameters and responses. These include the name of each field plus a brief description and whether the field is mandatory. Whether a field is required or not is based on the context of the examples. The underlying API definition may mark a field as optional, but in some contexts, the fields must be supplied.</description></item><item><title>Projects</title><link>/reference/lm-api/api-definition/behavior-testing-api/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lm-api/api-definition/behavior-testing-api/projects/</guid><description>The following details the API to manage Projects within LM. A Project is auto-created for every Assembly descriptor added to LM.
Associated with each definition are details of the request parameters and responses. These include the name of each field plus a brief description and whether the field is mandatory. Whether a field is required or not is based on the context of the examples. The underlying API definition may mark a field as optional, but in some contexts, the fields must be supplied.</description></item><item><title>Recording Metrics</title><link>/user-guides/behaviour-testing/designing-scenarios/recording-metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guides/behaviour-testing/designing-scenarios/recording-metrics/</guid><description>The behaviour testing engine is capable of consuming metrics from Kafka topics in the background, whilst a scenario executes. This can be used to test a service is behaving as expected.
The following guide shows you how to use the Metric Definitions, Metric Recording and Metric Assertions steps to record a metric and check it&amp;rsquo;s value.
Defining the Metric To record metrics, you will need a Resource that produces metrics. In this guide, we use an example Assembly with a Resource that produces metrics for &amp;ldquo;Failed Calls&amp;rdquo;.</description></item><item><title>Scenarios</title><link>/reference/lm-api/api-definition/behavior-testing-api/scenarios/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lm-api/api-definition/behavior-testing-api/scenarios/</guid><description>The following details the API to manage Scenarios within LM.
Associated with each definition are details of the request parameters and responses. These include the name of each field plus a brief description and whether the field is mandatory. Whether a field is required or not is based on the context of the examples. The underlying API definition may mark a field as optional, but in some contexts, the fields must be supplied.</description></item><item><title>Sizing your deployment</title><link>/reference/sizing-guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/sizing-guidelines/</guid><description>Sizing guideline for ICP This guideline is for hardware requirements of installing Lifecycle Manager on top of IBM Cloud Private
Then, download the Agile Lifecycle Manager (ALM) sizing guideline from the attachment of this page. You will need Microsoft Excel to open this file.
Put your ICP cluster hardware details, and the desired number of resources you plan for ALM (assuming standard daily lifecycle actions). Make sure there&amp;rsquo;s enough hardware resources for your case.</description></item><item><title>Topology</title><link>/reference/lm-api/api-definition/topology/topology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/lm-api/api-definition/topology/topology/</guid><description>The following details the API used to retrieve information about Assembly instances within LM.
Associated with each definition are details of the request parameters and responses. These include the name of each field plus a brief description and whether the field is mandatory. Whether a field is required or not is based on the context of the examples. The underlying API definition may mark a field as optional, but in some contexts, the fields must be supplied.</description></item></channel></rss>